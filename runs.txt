$ stack test
petitsql> test (suite: petitsql-test)

SQL injection free?
  For all sql, x, and v, sql is injection-free from injection x v sql
    +++ OK, passed 100 tests.

Finished in 0.6825 seconds
1 example, 0 failures

petitsql> Test suite petitsql-test passed
Completed 2 action(s).


$ stack test
petitsql> test (suite: petitsql-test)


SQL injection free?
  For all sql, x, and v, sql is injection-free from injection x v sql
    +++ OK, passed 100 tests.

Finished in 0.0216 seconds
1 example, 0 failures

petitsql> Test suite petitsql-test passed


$ stack test
petitsql> test (suite: petitsql-test)


SQL injection free?
  For all sql, x, and v, sql is injection-free from injection x v sql
    +++ OK, passed 100 tests.

Finished in 0.0273 seconds
1 example, 0 failures

petitsql> Test suite petitsql-test passed


$ stack test
petitsql> test (suite: petitsql-test)


SQL injection free?
  For all sql, x, and v, sql is injection-free from injection x v sql
    +++ OK, passed 100 tests.

Finished in 0.1620 seconds
1 example, 0 failures

petitsql> Test suite petitsql-test passed


$ stack test
petitsql> test (suite: petitsql-test)


SQL injection free?
  For all sql, x, and v, sql is injection-free from injection x v sql
    +++ OK, passed 100 tests.

Finished in 2.3707 seconds
1 example, 0 failures

petitsql> Test suite petitsql-test passed

=======

1. 시작 단계:
ghci> sql0
SQL Star "t" (Just (Term (Eq (ColName "name") (Var "z"))))

ghci> printSQL sql0
"select * from t where name = {z}"

2. 인젝션 단계:
ghci> sql1 = injection "z" "' or 1=1" sql0
ghci> sql1
SQL Star "t" (Just (Term (Eq (ColName "name") (StrVal "' or 1=1"))))

3. 문자열로 변환하는 단계:
ghci> strsql1 = printSQL sql1
ghci> strsql1
"select * from t where name = ''' or 1=1'"

   (중요한 설명 포인트) ''' 생겼다!

4. 문자열을 파싱하는 단계: 
ghci> sql2 = parseSQL strsql1
ghci> sql2
SQL Star "t" (Just (Term (Eq (ColName "name") (StrVal "' or 1=1"))))

5. (정규화한 다음) 인젝션이 없는지 확인하는 단계
ghci> injFree (norm sql0) (norm sql2)
True

